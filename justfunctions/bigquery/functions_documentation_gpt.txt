# Documentation for BigQuery Open Source library of UDFs Functions and Procedures | by JustDataPlease

## Contents
1. [channel_attribution(source, medium, campaign_name)](#channel_attribution)
2. [find_cyber_week(date)](#find_cyber_week)
3. [find_moon_illumination(date)](#find_moon_illumination)
4. [find_moon_illumination__(date_string)](#find_moon_illumination__)
5. [find_season(date)](#find_season)
6. [generate_date_calendar(table_name, start_date, end_date)](#generate_date_calendar)
7. [generate_date_calendar_with_holidays(table_name, start_date, end_date, country)](#generate_date_calendar_with_holidays)
8. [generate_hour_calendar(table_name)](#generate_hour_calendar)
9. [seconds_to_date(seconds)](#seconds_to_date)
10. [seconds_to_timestamp(seconds)](#seconds_to_timestamp)
11. [shift_date(date, years, months, days)](#shift_date)
12. [timestamp_to_string(timestamp)](#timestamp_to_string)
13. [convert_json_to_struct(string)](#convert_json_to_struct)
14. [dedup_table(table_name, timestamp_column, unique_column, output_table_suffix)](#dedup_table)
15. [generate_dbt_yml_schema(project_id, dataset_id)](#generate_dbt_yml_schema)
16. [generate_justsql_schema(project_id, dataset_id, tables)](#generate_justsql_schema)
17. [greatest_not_null(arr)](#greatest_not_null)
18. [least_not_null(arr)](#least_not_null)
19. [parse_yaml(string)](#parse_yaml)
20. [safe_least(x, y)](#safe_least)
21. [geometric_mean(col)](#geometric_mean)
22. [median_approx(col)](#median_approx)
23. [outliers_iqr(col, value_percentile_25, value_percentile_75)](#outliers_iqr)
24. [outliers_percentiles(col, value_percentile_5, value_percentile_95)](#outliers_percentiles)
25. [percentiles(arr, percentile)](#percentiles)
26. [percentiles_approx(col, percentile)](#percentiles_approx)
27. [weighted_average(col, weight)](#weighted_average)
28. [clean_email(email)](#clean_email)
29. [clean_special_symbols(string)](#clean_special_symbols)
30. [clean_special_symbols_custom(string)](#clean_special_symbols_custom)
31. [clean_url(url)](#clean_url)
32. [decode_url(url)](#decode_url)
33. [dedup_chars(string)](#dedup_chars)
34. [detect_department_email(email)](#detect_department_email)
35. [detect_free_email(email)](#detect_free_email)
36. [detect_free_email_domain(email_domain)](#detect_free_email_domain)
37. [detect_useragent_device_type(useragent)](#detect_useragent_device_type)
38. [extract_all_url_parameters(url)](#extract_all_url_parameters)
39. [extract_email_domain(url)](#extract_email_domain)
40. [extract_email_domain_base(url)](#extract_email_domain_base)
41. [extract_url_domain(url)](#extract_url_domain)
42. [extract_url_domain_base(url)](#extract_url_domain_base)
43. [extract_url_language(url)](#extract_url_language)
44. [extract_url_parameter(url, parameter)](#extract_url_parameter)
45. [extract_url_path(url, clean_url_tail)](#extract_url_path)
46. [extract_url_prefix(url)](#extract_url_prefix)
47. [extract_url_suffix(url)](#extract_url_suffix)
48. [extract_url_tail(url)](#extract_url_tail)
49. [fuzzy_distance_dam(string_1, string_2)](#fuzzy_distance_dam)
50. [fuzzy_distance_leven(string_1, string_2)](#fuzzy_distance_leven)
51. [fuzzy_nysiis(string)](#fuzzy_nysiis)
52. [normalize_text(string)](#normalize_text)
53. [parse_useragent(useragent)](#parse_useragent)
54. [remove_accents(string)](#remove_accents)
55. [remove_email_plus_address(email)](#remove_email_plus_address)
56. [remove_en_stopwords(string)](#remove_en_stopwords)
57. [remove_extra_spaces(string)](#remove_extra_spaces)
58. [remove_extra_whitespaces(string)](#remove_extra_whitespaces)
59. [replace_en_contractions(string, replacement)](#replace_en_contractions)
60. [replace_html_tags(string, replacement)](#replace_html_tags)
61. [replace_urls(string, replacement)](#replace_urls)
62. [split_url(url, part)](#split_url)
63. [stemmer_greek(string)](#stemmer_greek)
64. [stemmer_lancaster(string)](#stemmer_lancaster)
65. [stemmer_porter(string)](#stemmer_porter)
66. [surrogate_key(string)](#surrogate_key)
67. [surrogate_key_str(string)](#surrogate_key_str)
68. [transliterate_anyascii(string)](#transliterate_anyascii)
69. [validate_email(email)](#validate_email)
70. [word_distance(string_1, string_2)](#word_distance)
71. [word_tokens(string, symbol)](#word_tokens)

---
## <a id='channel_attribution'></a>1. channel_attribution(source, medium, campaign_name)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: analytics, text
- **Region**: eu
- **Description**: Performs channel attribution using the <source>, <medium>, and <campaign_name>.

**Example Query**:

```sql
SELECT `justfunctions.eu.channel_attribution`("shopify","paid","test")
```

**Example Output**:

```
paid shopping
```
---
## <a id='find_cyber_week'></a>2. find_cyber_week(date)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Determines if a <date> falls within Cyber Week and identifies the specific day (e.g., Thanksgiving, Black Friday).

**Example Query**:

```sql
SELECT `justfunctions.eu.find_cyber_week`("2023-11-24")
```

**Example Output**:

```
1 | Black Friday
```
---
## <a id='find_moon_illumination'></a>3. find_moon_illumination(date)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Calculates the Moon's illumination on a specific <date>, expressed as a fraction or percentage. For example, during a full moon, the illumination is near 100, while during a new moon, it is close to 0

**Example Query**:

```sql
SELECT `justfunctions.eu.find_moon_illumination`("2090-01-16")
```

**Example Output**:

```
1
```
---
## <a id='find_moon_illumination__'></a>4. find_moon_illumination__(date_string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Helper function for find_moon_illumination, using a <date_string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.find_moon_illumination__`("2090-01-16")
```

**Example Output**:

```
99.17
```
---
## <a id='find_season'></a>5. find_season(date)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Identifies the season name and the start date of the season for a given <date>.

**Example Query**:

```sql
SELECT `justfunctions.eu.find_season`("2020-01-04")
```

**Example Output**:

```
Winter | 2019-12-01
```
---
## <a id='generate_date_calendar'></a>6. generate_date_calendar(table_name, start_date, end_date)

- **Type**: User Defined SQL Procedure
- **Tags**: operations, date
- **Region**: eu
- **Description**: Generates a complete date calendar table named <table_name> from <start_date> to <end_date>.

**Example Query**:

```sql
CALL `justfunctions.eu.generate_date_calendar`("justfunctions.test.date_calendar","2020-01-01","2030-01-01")
```

**Example Output**:

```
- date_id: 20200101
- date: 2020-01-01
- epoch: 1577836800
- day_suffix: 1th
- day_name: Wednesday
- day_name_abbr: Wed
- day_of_week: 4
- day_of_month: 1
- day_of_quarter: 1
- day_of_year: 1
- week_of_month: 1
- week_of_year: 1
- week_of_year_iso: 2020-W01-3
- month: 1
- month_name: January
- month_name_abbr: Jan
- quarter: 1
- quarter_name: Q1
- year: 2020
- start_of_week: 2019-12-30
- start_of_week_saturday: 2019-12-28
- start_of_month: 2020-01-01
- start_of_midmonth: 2020-01-15
- start_of_quarter: 2020-01-01
- start_of_year: 2020-01-01
- end_of_week: 2020-01-03
- end_of_month: 2020-01-31
- end_of_quarter: 2020-03-31
- end_of_year: 2020-12-31
- start_of_fiscal_year: 2019-10-01
- end_of_fiscal_year: 2020-09-30
- yyyymm: 202001
- yyyymmdd: 20200101
- month_desc: 2020-Jan
- quarter_desc: 2020-Q1
- week_desc: 2020-W1
- is_weekend: FALSE
- start_of_season: 2019-12-01
- season: Winter
- moon_illumination: 29.95

```
---
## <a id='generate_date_calendar_with_holidays'></a>7. generate_date_calendar_with_holidays(table_name, start_date, end_date, country)

- **Type**: User Defined SQL Procedure
- **Tags**: operations, date
- **Region**: eu
- **Description**: Generates a complete date calendar table named <table_name> with holidays for the specified <country>, from <start_date> to <end_date>. Holidays are available between 2000-2100.

**Example Query**:

```sql
CALL `justfunctions.eu.generate_date_calendar_with_holidays`("justfunctions.test.date_calendar","2020-01-01","2030-01-01","GR")
```

**Example Output**:

```
- date_id: 20200101
- date: 2020-01-01
- epoch: 1577836800
- day_suffix: 1th
- day_name: Wednesday
- day_name_abbr: Wed
- day_of_week: 4
- day_of_month: 1
- day_of_quarter: 1
- day_of_year: 1
- week_of_month: 1
- week_of_year: 1
- week_of_year_iso: 2020-W01-3
- month: 1
- month_name: January
- month_name_abbr: Jan
- quarter: 1
- quarter_name: Q1
- year: 2020
- start_of_week: 2019-12-30
- start_of_week_saturday: 2019-12-28
- start_of_month: 2020-01-01
- start_of_midmonth: 2020-01-15
- start_of_quarter: 2020-01-01
- start_of_year: 2020-01-01
- end_of_week: 2020-01-03
- end_of_month: 2020-01-31
- end_of_quarter: 2020-03-31
- end_of_year: 2020-12-31
- start_of_fiscal_year: 2019-10-01
- end_of_fiscal_year: 2020-09-30
- yyyymm: 202001
- yyyymmdd: 20200101
- month_desc: 2020-Jan
- quarter_desc: 2020-Q1
- week_desc: 2020-W1
- is_weekend: FALSE
- season: Winter
- start_of_season: 2019-12-01
- holiday_name: Πρωτοχρονιά
- holiday_country: gr
- special_day_name : New Year's Day
- moon_illumination : 29.95

```
---
## <a id='generate_hour_calendar'></a>8. generate_hour_calendar(table_name)

- **Type**: User Defined SQL Procedure
- **Tags**: operations, date
- **Region**: eu
- **Description**: Generates an hourly calendar table named <table_name> for a 24-hour day.

**Example Query**:

```sql
CALL `justfunctions.eu.generate_hour_calendar`("justfunctions.test.hour_calendar")
```

**Example Output**:

```
- hour_id: "00"
- hour_24: 0
- hour_12: 12
- am_pm: am
- is_business_hour: FALSE
- part_of_day: Night

```
---
## <a id='seconds_to_date'></a>9. seconds_to_date(seconds)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Converts <seconds> to date format '%Y-%m-%d'.

**Example Query**:

```sql
SELECT `justfunctions.eu.seconds_to_date`("1687613655")
```

**Example Output**:

```
2023-06-24
```
---
## <a id='seconds_to_timestamp'></a>10. seconds_to_timestamp(seconds)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Converts <seconds> to timestamp format '%Y-%m-%d %H:%M:%S'.

**Example Query**:

```sql
SELECT `justfunctions.eu.seconds_to_timestamp`("1687613655")
```

**Example Output**:

```
2023-06-24 13:00:01 UTC
```
---
## <a id='shift_date'></a>11. shift_date(date, years, months, days)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Shifts a <date> by adding or subtracting specified <years>, <months>, and <days>. Use a minus (-) to subtract.

**Example Query**:

```sql
SELECT `justfunctions.eu.shift_date`("2023-01-01","-2","1","4")
```

**Example Output**:

```
2021-02-05
```
---
## <a id='timestamp_to_string'></a>12. timestamp_to_string(timestamp)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: date
- **Region**: eu
- **Description**: Converts a <timestamp> to string format '%Y-%m-%d %H:%M:%S'.

**Example Query**:

```sql
SELECT `justfunctions.eu.timestamp_to_string`("2023-06-24 13:01:02 UTC")
```

**Example Output**:

```
2023-06-24 13:01:02
```
---
## <a id='convert_json_to_struct'></a>13. convert_json_to_struct(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: operations, text
- **Region**: eu
- **Description**: Converts a JSON <string> to a STRUCT data type.

**Example Query**:

```sql
SELECT `justfunctions.eu.convert_json_to_struct`("{ "time": { "new_value": "17:00","old_value": "16:30" }, "price": { "new_value": "1","old_value": "2" } }")
```

**Example Output**:

```
- time: {"new_value":"17:00","old_value":"16:30"}
- price: {"new_value":"1","old_value":"2"}

```
---
## <a id='dedup_table'></a>14. dedup_table(table_name, timestamp_column, unique_column, output_table_suffix)

- **Type**: User Defined SQL Procedure
- **Tags**: operations
- **Region**: eu
- **Description**: Creates a deduplicated version of the table <table_name>, retaining the latest row based on the <timestamp_column>, and outputs it with the suffix <output_table_suffix>. Arguments <timestamp_column>, <unique_column>, <output_table_suffix> are optional.

**Example Query**:

```sql
CALL `justfunctions.eu.dedup_table`("your_project.your_dataset.your_table","created_at","user_id","_dedup")
```

**Example Output**:

```
your_project.your_dataset.your_table.your_table_dedup
```
---
## <a id='generate_dbt_yml_schema'></a>15. generate_dbt_yml_schema(project_id, dataset_id)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: operations
- **Region**: eu
- **Description**: Generates a DBT schema.yml using the information_schema of the generated tables for the specified <project_id> and <dataset_id>. For this function to work you need to create your own function in your dataset.

**Example Query**:

```sql
SELECT `justfunctions.eu.generate_dbt_yml_schema`("justfunctions","eu")
```

**Example Output**:

```
version: 2
models: - name: country_distinct columns: - name: service_country - name: official_name - name: alpha_2 
```
---
## <a id='generate_justsql_schema'></a>16. generate_justsql_schema(project_id, dataset_id, tables)

- **Type**: User Defined SQL Procedure
- **Tags**: operations
- **Region**: eu
- **Description**: Generates a JSON schema for use with JustSQL GPT using the specified <project_id>, <dataset_id>, and list of <tables> (https://chat.openai.com/g/g-hzlGYume7-justsql-for-bigquery).

**Example Query**:

```sql
CALL `justfunctions.eu.generate_justsql_schema`("justfunctions","eu","['date_calendar']")
```

**Example Output**:

```
{ "tables": [{ "table_name": "justfunctions.eu.date_calendar", "columns": [{ "name": "date","type":"DATE"},{ "name": "Quarter","type":"STRING"},{ "name": "month_name","type":"STRING"},{ "name": "epoch","type":"INT64"},{ "name": "date_id","type":"INT64"},{ "name": "day_of_month","type":"INT64"},{ "name": "day_suffix","type":"STRING"}] }] }
```
---
## <a id='greatest_not_null'></a>17. greatest_not_null(arr)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: operations
- **Region**: eu
- **Description**: This SQL function returns the greatest (maximum) value among multiple columns in the array <arr>, while properly handling NULL values.

**Example Query**:

```sql
SELECT `justfunctions.eu.greatest_not_null`("[col_1, col_2, col_3]")
```

**Example Output**:

```
[5,10,6,1]

| col_1 | col_2 | col_3 | greatest_value |
|-------|-------|-------|----------------|
|   5   |   3   |  NULL |        5       |
|  NULL |   10  |   7   |       10       |
|   4   |  NULL |   6   |        6       |
|  NULL |  NULL |   1   |        1       |

```
---
## <a id='least_not_null'></a>18. least_not_null(arr)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: operations
- **Region**: eu
- **Description**: This SQL function returns the least (minimum) value among multiple columns in the array <arr>, while properly handling NULL values.

**Example Query**:

```sql
SELECT `justfunctions.eu.least_not_null`("[col_1, col_2, col_3]")
```

**Example Output**:

```
[3,7,4,1]

| col_1 | col_2 | col_3 | greatest_value |
|-------|-------|-------|----------------|
|   5   |   3   |  NULL |        3       |
|  NULL |   10  |   7   |        7       |
|   4   |  NULL |   6   |        4       |
|  NULL |  NULL |   1   |        1       |

```
---
## <a id='parse_yaml'></a>19. parse_yaml(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: operations, text
- **Region**: eu
- **Description**: Converts a YAML <string> to JSON format.

**Example Query**:

```sql
SELECT `justfunctions.eu.parse_yaml`("---
 updated_at:
 - 2023-11-12 08:08:25.291779000 Z
 - 2023-11-12 08:25:18.648572080 Z
 status:
 - new
 - canceled
 ")
```

**Example Output**:

```
{'status': ['new', 'canceled'], 'updated_at': ['2023-11-12T08:08:25.291Z', '2023-11-12T08:25:18.648Z']}
```
---
## <a id='safe_least'></a>20. safe_least(x, y)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: operations
- **Region**: eu
- **Description**: Safely compares two values <x> and <y> and returns the lesser of the two while properly handling NULL values.

**Example Query**:

```sql
SELECT `justfunctions.eu.safe_least`("col_1","col_2")
```

**Example Output**:

```
[4,3]

```
---
## <a id='geometric_mean'></a>21. geometric_mean(col)

- **Type**: SQL User Defined Aggregate Function (SQL UDAF)
- **Tags**: STATISTICS
- **Region**: eu
- **Description**: Finds the geometric mean of a column <value>.

**Example Query**:

```sql
SELECT `justfunctions.eu.geometric_mean`("col_1")
```

**Example Output**:

```
12
```
---
## <a id='median_approx'></a>22. median_approx(col)

- **Type**: SQL User Defined Aggregate Function (SQL UDAF)
- **Tags**: STATISTICS, percentiles
- **Region**: eu
- **Description**: Finds the median of the specified column <col> by calculating approximate quantiles (1% granularity approximation). This approach provides an efficient and fast estimate of the median value.

**Example Query**:

```sql
SELECT `justfunctions.eu.median_approx`("d")
```

**Example Output**:

```
20
```
---
## <a id='outliers_iqr'></a>23. outliers_iqr(col, value_percentile_25, value_percentile_75)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: STATISTICS, outliers
- **Region**: eu
- **Description**: Detects if a <value> is an outlier based on the IQR method, using the 25th percentile <value_percentile_25> and 75th percentile <value_percentile_75>.

**Example Query**:

```sql
SELECT `justfunctions.eu.outliers_iqr`("col","value_percentile_25","value_percentile_75")
```

**Example Output**:

```
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
```
---
## <a id='outliers_percentiles'></a>24. outliers_percentiles(col, value_percentile_5, value_percentile_95)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: STATISTICS, outliers
- **Region**: eu
- **Description**: Detects if a <value> is an outlier based on then 5th percentile <value_percentile_5> and 95th percentile <value_percentile_95>. Assigns -1 for lower bound outliers, 1 for upper bound outliers, and 0 for non-outliers.

**Example Query**:

```sql
SELECT `justfunctions.eu.outliers_percentiles`("col","value_percentile_5","value_percentile_95")
```

**Example Output**:

```
['−1', '−1', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]
```
---
## <a id='percentiles'></a>25. percentiles(arr, percentile)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: STATISTICS, percentiles
- **Region**: eu
- **Description**: Finds the specified <percentile> of an array <arr>.

**Example Query**:

```sql
SELECT `justfunctions.eu.percentiles`("[1.2, 2.3, 3.2, 4.2, 5]","50")
```

**Example Output**:

```
3.2
```
---
## <a id='percentiles_approx'></a>26. percentiles_approx(col, percentile)

- **Type**: SQL User Defined Aggregate Function (SQL UDAF)
- **Tags**: STATISTICS, percentiles
- **Region**: eu
- **Description**: Finds the percentile <percentile> of the specified column <column> by calculating approximate quantiles (1% granularity approximation). This approach provides an efficient and fast estimate of percentiles.

**Example Query**:

```sql
SELECT `justfunctions.eu.percentiles_approx`("d","50")
```

**Example Output**:

```
20
```
---
## <a id='weighted_average'></a>27. weighted_average(col, weight)

- **Type**: SQL User Defined Aggregate Function (SQL UDAF)
- **Tags**: STATISTICS
- **Region**: eu
- **Description**: Finds the weighted average of a column <value>.

**Example Query**:

```sql
SELECT `justfunctions.eu.weighted_average`("g","w")
```

**Example Output**:

```
12
```
---
## <a id='clean_email'></a>28. clean_email(email)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Converts an <email> address to lowercase and removes any sub-address (also known as plus addressing).

**Example Query**:

```sql
SELECT `justfunctions.eu.clean_email`("HeLLo+other@gmail.com")
```

**Example Output**:

```
hello@gmail.com
```
---
## <a id='clean_special_symbols'></a>29. clean_special_symbols(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Cleans special symbols in a <string> using custom symbols.

**Example Query**:

```sql
SELECT `justfunctions.eu.clean_special_symbols`("Vacation✈️ time!🌴😀🏖️")
```

**Example Output**:

```
vacation time
```
---
## <a id='clean_special_symbols_custom'></a>30. clean_special_symbols_custom(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Cleans special symbols in a <string> using custom symbols.

**Example Query**:

```sql
SELECT `justfunctions.eu.clean_special_symbols_custom`("Vacation✈️ time!🌴😀🏖️")
```

**Example Output**:

```
vacation time
```
---
## <a id='clean_url'></a>31. clean_url(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Removes http://, ftp://, https://, the URL tail, and the last URL slash from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.clean_url`("https://hey.com/me/?231#213")
```

**Example Output**:

```
hey.com/me
```
---
## <a id='decode_url'></a>32. decode_url(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Decodes a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.decode_url`("https%3A%2F%2Fjustdataplease.com%2Fjustfunctions-bigquery%2F%3Futm_campaign%3Dtest")
```

**Example Output**:

```
https://justdataplease.com/justfunctions-bigquery/?utm_campaign=test
```
---
## <a id='dedup_chars'></a>33. dedup_chars(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Deduplicates characters in a <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.dedup_chars`("Helloooo!")
```

**Example Output**:

```
Helo!
```
---
## <a id='detect_department_email'></a>34. detect_department_email(email)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Detects if an <email> belongs to a business department (e.g., sales, HR, support).

**Example Query**:

```sql
SELECT `justfunctions.eu.detect_department_email`("sales@dev.io")
```

**Example Output**:

```
1
```
---
## <a id='detect_free_email'></a>35. detect_free_email(email)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Detects if an <email> belongs to a free email service (e.g., Gmail, Yahoo, Outlook).

**Example Query**:

```sql
SELECT `justfunctions.eu.detect_free_email`("jason@gmail.com")
```

**Example Output**:

```
1
```
---
## <a id='detect_free_email_domain'></a>36. detect_free_email_domain(email_domain)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Detects if an <email_domain> belongs to a free email service (e.g., Gmail, Yahoo, Outlook).

**Example Query**:

```sql
SELECT `justfunctions.eu.detect_free_email_domain`("gmail")
```

**Example Output**:

```
1
```
---
## <a id='detect_useragent_device_type'></a>37. detect_useragent_device_type(useragent)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, useragent
- **Region**: eu
- **Description**: Detects the device type from a <useragent> string. It can be a tablet, mobile, PC, TV, or other.

**Example Query**:

```sql
SELECT `justfunctions.eu.detect_useragent_device_type`("Mozilla/5.0 (iPad; CPU OS 12_5_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1")
```

**Example Output**:

```
tablet
```
---
## <a id='extract_all_url_parameters'></a>38. extract_all_url_parameters(url)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts all parameters from a <url> in JSON format.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_all_url_parameters`("justdataplease.com/test/?medium=cpc&source=google&keyword=hey&source=facebook")
```

**Example Output**:

```
{"keyword":"hey","medium":"cpc","source":"facebook"}
```
---
## <a id='extract_email_domain'></a>39. extract_email_domain(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Extracts the domain from an <email>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_email_domain`("jason@justdataplease.com")
```

**Example Output**:

```
justdataplease.com
```
---
## <a id='extract_email_domain_base'></a>40. extract_email_domain_base(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Extracts the base domain from an <email>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_email_domain_base`("jason@justdataplease.com")
```

**Example Output**:

```
justdataplease
```
---
## <a id='extract_url_domain'></a>41. extract_url_domain(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the domain from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_domain`("https://hey.com/me/?231#213")
```

**Example Output**:

```
hey.com
```
---
## <a id='extract_url_domain_base'></a>42. extract_url_domain_base(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the base domain from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_domain_base`("https://hey.com/me/?231#213")
```

**Example Output**:

```
hey
```
---
## <a id='extract_url_language'></a>43. extract_url_language(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the language from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_language`("www.justdataplease.com/en-US/")
```

**Example Output**:

```
english
```
---
## <a id='extract_url_parameter'></a>44. extract_url_parameter(url, parameter)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the value of a specified <parameter> from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_parameter`("www.google.com?medium=cpc&source=google&keyword=hey&source=facebook","source")
```

**Example Output**:

```
facebook
```
---
## <a id='extract_url_path'></a>45. extract_url_path(url, clean_url_tail)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the URL path from a <url>, optionally removing the URL tail.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_path`("https://hey.com/me/?parameter=1","True")
```

**Example Output**:

```
/me/
```
---
## <a id='extract_url_prefix'></a>46. extract_url_prefix(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the URL prefix from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_prefix`("https://en.hey.com/me/?231#213")
```

**Example Output**:

```
en
```
---
## <a id='extract_url_suffix'></a>47. extract_url_suffix(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the URL suffix from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_suffix`("https://en.hey.com/me/?231#213")
```

**Example Output**:

```
com
```
---
## <a id='extract_url_tail'></a>48. extract_url_tail(url)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Extracts the URL tail from a <url>.

**Example Query**:

```sql
SELECT `justfunctions.eu.extract_url_tail`("https://hey.com/me/?parameter=1")
```

**Example Output**:

```
parameter=1
```
---
## <a id='fuzzy_distance_dam'></a>49. fuzzy_distance_dam(string_1, string_2)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: text, similarity
- **Region**: eu
- **Description**: Calculates Damerau-Levenshtein distance between <string_1> and <string_2>.

**Example Query**:

```sql
SELECT `justfunctions.eu.fuzzy_distance_dam`("pyhtno","python")
```

**Example Output**:

```
2
```
---
## <a id='fuzzy_distance_leven'></a>50. fuzzy_distance_leven(string_1, string_2)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: text, similarity
- **Region**: eu
- **Description**: Calculates Levenshtein distance between <string_1> and <string_2>.

**Example Query**:

```sql
SELECT `justfunctions.eu.fuzzy_distance_leven`("pyhtno","python")
```

**Example Output**:

```
3
```
---
## <a id='fuzzy_nysiis'></a>51. fuzzy_nysiis(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, similarity
- **Region**: eu
- **Description**: Calculates NYSIIS code for <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.fuzzy_nysiis`("python")
```

**Example Output**:

```
pytan
```
---
## <a id='normalize_text'></a>52. normalize_text(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Normalizes a given <string> by converting it to lowercase, applying transliteration, and removing special symbols.

**Example Query**:

```sql
SELECT `justfunctions.eu.normalize_text`("🎉 Welcome to Athens in 2023! Καλώς ήρθες!")
```

**Example Output**:

```
welcome to athens in 2023
```
---
## <a id='parse_useragent'></a>53. parse_useragent(useragent)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: text, useragent
- **Region**: eu
- **Description**: Parses the details from a <useragent> string.

**Example Query**:

```sql
SELECT `justfunctions.eu.parse_useragent`("Mozilla/5.0 (iPad; CPU OS 12_5_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.2 Mobile/15E148 Safari/604.1")
```

**Example Output**:

```
name : Mobile Safari |
browser.version : 12.1.2 |
browser.major : 12 |
engine.name : WebKit |
engine.version : 605.1.15 |
os.name : iOS |
os.version : 12.5.7 |
device.vendor : Apple |
device.model : iPad |
device.type : tablet |
arch : null

```
---
## <a id='remove_accents'></a>54. remove_accents(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Removes accents from a <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.remove_accents`("¿Dóndé Éstá Mí Ágúá?")
```

**Example Output**:

```
¿Donde Esta Mi Agua?
```
---
## <a id='remove_email_plus_address'></a>55. remove_email_plus_address(email)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**:  any sub-address (also known as plus addressing) from an <email> address.

**Example Query**:

```sql
SELECT `justfunctions.eu.remove_email_plus_address`("hey+other@gmail.com")
```

**Example Output**:

```
hey@gmail.com
```
---
## <a id='remove_en_stopwords'></a>56. remove_en_stopwords(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Removes English stopwords from a <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.remove_en_stopwords`("The query in the database is returning the rows with the specified column values.")
```

**Example Output**:

```
query   database  returning  rows   specified column values.
```
---
## <a id='remove_extra_spaces'></a>57. remove_extra_spaces(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Removes extra spaces (tab, space, newline, paragraph, etc.) in a <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.remove_extra_spaces`("\tHi     there
.\n\n")
```

**Example Output**:

```
Hi there.
```
---
## <a id='remove_extra_whitespaces'></a>58. remove_extra_whitespaces(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Removes extra whitespaces in a <string>.

**Example Query**:

```sql
SELECT `justfunctions.eu.remove_extra_whitespaces`("Hi     there
.")
```

**Example Output**:

```
Hi there
.
```
---
## <a id='replace_en_contractions'></a>59. replace_en_contractions(string, replacement)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Replaces English contractions in a <string> with the specified <replacement>.

**Example Query**:

```sql
SELECT `justfunctions.eu.replace_en_contractions`("I'll be great tmr thx","r"\s+"")
```

**Example Output**:

```
I will be great tomorrow thanks
```
---
## <a id='replace_html_tags'></a>60. replace_html_tags(string, replacement)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Replaces HTML tags in a <string> with the specified <replacement>.

**Example Query**:

```sql
SELECT `justfunctions.eu.replace_html_tags`("<div class=\'test\'>hello world<a href=\'#\'>hello world<\a><\\div>"," ")
```

**Example Output**:

```
hello world hello world
```
---
## <a id='replace_urls'></a>61. replace_urls(string, replacement)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Replaces URL patterns in a <string> with the specified <replacement>.

**Example Query**:

```sql
SELECT `justfunctions.eu.replace_urls`("Google it https://www.google.com/ !","")
```

**Example Output**:

```
Google it !
```
---
## <a id='split_url'></a>62. split_url(url, part)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, url
- **Region**: eu
- **Description**: Splits a <url> into parts using the '/' symbol.

**Example Query**:

```sql
SELECT `justfunctions.eu.split_url`("hey.com/me/?231#213","2")
```

**Example Output**:

```
me
```
---
## <a id='stemmer_greek'></a>63. stemmer_greek(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: NLP, text, stemmer
- **Region**: eu
- **Description**: Returns the stem of a <string>. Supports the Greek language.

**Example Query**:

```sql
SELECT `justfunctions.eu.stemmer_greek`("καλησπερα")
```

**Example Output**:

```
ΚΑΛΗΣΠΕΡ
```
---
## <a id='stemmer_lancaster'></a>64. stemmer_lancaster(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: NLP, text, stemmer
- **Region**: eu
- **Description**: Returns the stem of a <string> using the Lancaster algorithm. Supports the English language.

**Example Query**:

```sql
SELECT `justfunctions.eu.stemmer_lancaster`("replied")
```

**Example Output**:

```
reply
```
---
## <a id='stemmer_porter'></a>65. stemmer_porter(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: NLP, text, stemmer
- **Region**: eu
- **Description**: Returns the stem of a <string> using the Porter algorithm. Supports the English language.

**Example Query**:

```sql
SELECT `justfunctions.eu.stemmer_porter`("replied")
```

**Example Output**:

```
repli
```
---
## <a id='surrogate_key'></a>66. surrogate_key(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, operations
- **Region**: eu
- **Description**: Creates a hashed value of multiple field <string>. Use CONCAT to create <string> to include multiple fields.

**Example Query**:

```sql
SELECT `justfunctions.eu.surrogate_key`("python")
```

**Example Output**:

```
2065202487608477923
```
---
## <a id='surrogate_key_str'></a>67. surrogate_key_str(string)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, operations
- **Region**: eu
- **Description**: Creates a hashed value of multiple field <string>. Use CONCAT to create <string> to include multiple fields.

**Example Query**:

```sql
SELECT `justfunctions.eu.surrogate_key_str`("python")
```

**Example Output**:

```
2065202487608477923
```
---
## <a id='transliterate_anyascii'></a>68. transliterate_anyascii(string)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: NLP, text, transliteration
- **Region**: eu
- **Description**: Converts Unicode characters in a <string> to their best ASCII representation.

**Example Query**:

```sql
SELECT `justfunctions.eu.transliterate_anyascii`("καλημέρα")
```

**Example Output**:

```
kalimera
```
---
## <a id='validate_email'></a>69. validate_email(email)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: text, email
- **Region**: eu
- **Description**: Validates if an <email> address is properly formatted.

**Example Query**:

```sql
SELECT `justfunctions.eu.validate_email`("12/jason@gmail.com")
```

**Example Output**:

```
0
```
---
## <a id='word_distance'></a>70. word_distance(string_1, string_2)

- **Type**: JavaScript User Defined Function (JavaScript UDF)
- **Tags**: text, similarity
- **Region**: eu
- **Description**: Calculates Levenshtein distance between <string_1> and <string_2>.

**Example Query**:

```sql
SELECT `justfunctions.eu.word_distance`("python","pithon")
```

**Example Output**:

```
1
```
---
## <a id='word_tokens'></a>71. word_tokens(string, symbol)

- **Type**: SQL User Defined Function (SQL UDF)
- **Tags**: NLP, text
- **Region**: eu
- **Description**: Splits a <string> into words using the specified <symbol>.

**Example Query**:

```sql
SELECT `justfunctions.eu.word_tokens`("this is a sentence","\\s+")
```

**Example Output**:

```
['this', 'is', 'a', 'sentence']
```
---
